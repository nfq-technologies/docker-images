#!/bin/bash
set -e

# Configurable options
timeout=80
tpl="docker-compose.tpl"


# Script level settings
cwd=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
starter_image="$1"
pid=${BASHPID}
script_name="$(basename $0)"
oxid_version="${script_name#check_oxid_}"
oxid_version="$(echo "$oxid_version" | tr '-' '.')"
source "${cwd}/../../_tools/helpers/common.sh"


# destroy containers and remove trash
cleanup() {
	set +e
	docker-compose -p "test${pid}" -f "${cwd}/docker-compose-${pid}.yml" stop &>/dev/null
	docker-compose -p "test${pid}" -f "${cwd}/docker-compose-${pid}.yml" rm -fv &>/dev/null

	rm -rf ${cwd}/docker-compose-${pid}.yml
	set -e
}

trap cleanup EXIT

# start mysql server container with data volume from the tested image
cat "${cwd}/${tpl}" | sed \
-e "s#__PID__#${pid}#" \
-e "s#__STARTER_IMAGE__#${starter_image}#" \
-e "s#__OXID_VERSION__#${oxid_version}#" \
> ${cwd}/docker-compose-${pid}.yml

docker-compose -p "test${pid}" -f "${cwd}/docker-compose-${pid}.yml" up -d &>/dev/null

wait_for_connection "localhost:${pid}" "${timeout}"

# Helper for running test
test_helper() {
	ssh -o StrictHostKeyChecking=no -p $pid project@localhost "cd /home/project/src/www/web/modules && $1"
}

# actual tests
test_helper "composer oxid-module --list 2>/dev/null | fgrep nfq_dummy |fgrep -iq enabled" || (echo "Module not enabled" && exit 1) 
test_helper "composer oxid-db --update-views 2>/dev/null | fgrep -iq 'DB views updated'" || (echo "Update views command failed" && exit 1)

