#!/bin/bash
set -e

name=test_box_$(date +%s%N)
cwd=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
timeout_ms=$(basename $0 | sed 's/^.*_\([0-9]*\)_ms.*$/\1/g')
timeout_hard_ms=$(($timeout_ms+3000))
port=$(basename $0 | sed 's/^.*_\([0-9]*\)_port.*$/\1/g')


if [[ -r "${cwd}/../../_tools/helpers/common.sh" ]]; then
	source "${cwd}/../../_tools/helpers/common.sh"
else
	if [[ -r "${cwd}/../../../nfqlt/_tools/helpers/common.sh" ]]; then
		source "${cwd}/../../../nfqlt/_tools/helpers/common.sh"
	else
		source "${cwd}/../../../../../nfqlt/_tools/helpers/common.sh"
	fi
fi

# destroy containers and remove trash
cleanup() {
    set +e
	docker stop -t 1 $name >/dev/null
	docker rm -v $name >/dev/null
    set -e
}
trap cleanup EXIT

docker run -d --name $name $1 >/dev/null
t1=$(date +%s%N)
box_ip=$(get_container_ip $name)

until netcat -nz -w1 $box_ip $port </dev/null
do
	t2=$(date +%s%N)
	start_time_ms=$((($t2-$t1)/1000/1000))
	if [ $start_time_ms -gt $timeout_hard_ms ]
	then
		break
	fi
	sleep 0.05
done

t2=$(date +%s%N)
start_time_ms=$((($t2-$t1)/1000/1000))


if [ $start_time_ms -gt $timeout_ms ]
then
	echo "ERROR: container started in $start_time_ms, timeout was $timeout_ms ms (result: $start_time_ms ms; hard timeout $timeout_hard_ms ms)."
	exit 1
fi

echo "INFO: container started in $start_time_ms ms."

exit 0

