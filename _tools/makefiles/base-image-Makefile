# base-image-Makefile

IMAGE_BASE_NAME = $(shell basename $(shell pwd))
IMAGE_TYPE = nfqlt
IMAGE_REGISTRY = docker.nfq.lt/
IMAGE_FULL_NAME = $(IMAGE_REGISTRY)$(IMAGE_TYPE)/$(IMAGE_BASE_NAME)
CHILDREN = $(shell ../_tools/sorting.sh)

ARM64_CONTEXT = $(shell [ "`uname -m`" = "x86_64" ] && echo "arm" || echo "default" )
AMD64_CONTEXT = "default"

COMMANDS = all all-arm64 all-amd64 build build-arm64 build-amd64 test test-arm64 test-amd64 push push-arm64 push-amd64 pull clean branch-all branch-build run run-bash publish publish-amd64 publish-arm64
SILENT_COMMANDS = help status calc-start calc-stop get-image-name

.PHONY: $(COMMANDS) $(SILENT_COMMANDS)
.SILENT: $(SILENT_COMMANDS)
#.NOTPARALLEL:


help:
	echo
	echo "Core image name: $(IMAGE_TYPE)/$(IMAGE_BASE_NAME)"
	echo "Image name: $(IMAGE_FULL_NAME)"
	echo "Available commands: $(COMMANDS) $(SILENT_COMMANDS)"
	echo


branch-all:
	make all
	for dir in $(CHILDREN); do \
		$(MAKE) all -C ../$$dir; \
	done


branch-build:
	make build
	for dir in $(CHILDREN); do \
		$(MAKE) build -C ../$$dir; \
	done


all:
	make build && make test && make push

all-arm64:
	make build-arm64 && make test-arm64 && make push-arm64

all-amd64:
	make build-amd64 && make test-amd64 && make push-amd64

build:
	$(MAKE) -j2 build-arm64 build-amd64 # Parallel build amd/arm images
	make status

build-arm64:
	$(MAKE) CONTEXT=$(ARM64_CONTEXT) ARCH=arm64 build-arch

build-amd64:
	$(MAKE) CONTEXT=$(AMD64_CONTEXT) ARCH=amd64 build-arch

build-arch:
	@echo
	@echo "# Building $(ARCH) image..."
	@echo "# Building context $(CONTEXT)..."
	@echo
	sed 's~FROM nfqlt~FROM ${IMAGE_REGISTRY}nfqlt~' Dockerfile > .Dockerfile_$(ARCH)
	DOCKER_CONTEXT=$(CONTEXT) docker build --no-cache -f .Dockerfile_$(ARCH) -t $(IMAGE_FULL_NAME):$(ARCH) ./
	rm -f .Dockerfile_$(ARCH)
	make status

manifest:
	@echo
	@echo "# Building manifest..."
	echo
	docker manifest rm $(IMAGE_FULL_NAME) || true
	docker manifest create $(IMAGE_FULL_NAME):latest $(IMAGE_FULL_NAME):amd64 $(IMAGE_FULL_NAME):arm64
	docker manifest push $(IMAGE_FULL_NAME):latest
	make status

test:
	$(MAKE) test-amd64 test-arm64

test-amd64:
	$(MAKE) CONTEXT=$(AMD64_CONTEXT) ARCH=amd64 test-arch

test-arm64:
	$(MAKE) CONTEXT=$(ARM64_CONTEXT) ARCH=arm64 test-arch

test-arch:
	@echo
	@echo "# Testing image..."
	@echo
	if [ -d test ];	then\
		DOCKER_CONTEXT=$(CONTEXT) run-parts -v -a $(IMAGE_FULL_NAME):$(ARCH) test; \
	fi
	@echo
	@echo "Tests passed. ($(shell run-parts --test test | wc -l))"
	@echo

push:
	make -j2 push-amd64 push-arm64
	docker manifest rm $(IMAGE_FULL_NAME):latest || true
	docker manifest create $(IMAGE_FULL_NAME):latest $(IMAGE_FULL_NAME):amd64 $(IMAGE_FULL_NAME):arm64
	docker manifest push $(IMAGE_FULL_NAME):latest

push-amd64:
	@echo
	@echo "# Pushing amd64 image to registry..."
	@echo
	DOCKER_CONTEXT=$(AMD64_CONTEXT) docker push $(IMAGE_FULL_NAME):amd64

push-arm64:
	@echo
	@echo "# Pushing arm image to registry..."
	@echo
	DOCKER_CONTEXT=$(ARM64_CONTEXT) docker push $(IMAGE_FULL_NAME):arm64

pull:
	@echo
	@echo "# Pulling image from registry..."
	@echo
	docker pull $(IMAGE_TYPE)/$(IMAGE_BASE_NAME)
	docker tag $(IMAGE_TYPE)/$(IMAGE_BASE_NAME) $(IMAGE_FULL_NAME)


clean:
	@echo
	@echo "# Removing local containers and images..."
	@echo
	docker stop $(shell docker ps -a | grep ' $(IMAGE_FULL_NAME):' | cut -d' ' -f1) 2>/dev/null || true
	docker stop $(shell docker ps -a | grep ' $(IMAGE_FULL_NAME) ' | cut -d' ' -f1) 2>/dev/null || true
	docker rm -f $(shell docker ps -a | grep ' $(IMAGE_FULL_NAME):' | cut -d' ' -f1) 2>/dev/null || true
	docker rm -f $(shell docker ps -a | grep ' $(IMAGE_FULL_NAME) ' | cut -d' ' -f1) 2>/dev/null || true
	bash -c "docker images |\
		 grep '^$(IMAGE_FULL_NAME) ' |\
		 tr -s ' ' ':' |\
		 cut -d: -f2 |\
		 xargs -n1 -IT docker rmi $(IMAGE_FULL_NAME):T 2>/dev/null || true"
	bash -c "docker images |\
		 grep '^$(IMAGE_TYPE)/$(IMAGE_BASE_NAME) ' |\
		 tr -s ' ' ':' |\
		 cut -d: -f2 |\
		 xargs -n1 -IT docker rmi $(IMAGE_TYPE)/$(IMAGE_BASE_NAME):T 2>/dev/null || true"
	make status


status:
	echo
	echo "# Showing image status..."
	echo
	docker images | grep -i "$(IMAGE_FULL_NAME) " || true
	echo

run:
	docker run -it --rm $(IMAGE_FULL_NAME)

run-bash:
	docker run -it --rm $(IMAGE_FULL_NAME) env TERM=xterm bash -l

calc-start:
	../_tools/start-stop-time-calc.php --start

calc-stop:
	../_tools/start-stop-time-calc.php --stop

get-image-name:
	echo $(IMAGE_FULL_NAME)


publish:
	@echo
	@echo "# Publishing image to docker hub..."
	@echo
	$(MAKE) -j2 publish-amd64 publish-arm64
	docker manifest rm $(IMAGE_PUBLISH_NAME):latest || true
	docker manifest create $(IMAGE_PUBLISH_NAME):latest $(IMAGE_PUBLISH_NAME):amd64 $(IMAGE_PUBLISH_NAME):arm64
	docker manifest push $(IMAGE_PUBLISH_NAME):latest

publish-arm64:
	$(MAKE) CONTEXT=$(ARM64_CONTEXT) ARCH=arm64 publish-arch
publish-amd64:
	$(MAKE) CONTEXT=$(AMD64_CONTEXT) ARCH=amd64 publish-arch

publish-arch:
	DOCKER_CONTEXT=$(CONTEXT) docker pull ${IMAGE_FULL_NAME}:$(ARCH)
	DOCKER_CONTEXT=$(CONTEXT) docker tag ${IMAGE_FULL_NAME}:$(ARCH) ${IMAGE_PUBLISH_NAME}:$(ARCH)
	DOCKER_CONTEXT=$(CONTEXT) docker push ${IMAGE_PUBLISH_NAME}:$(ARCH)
	DOCKER_CONTEXT=$(CONTEXT) docker rmi ${IMAGE_PUBLISH_NAME}:$(ARCH)

