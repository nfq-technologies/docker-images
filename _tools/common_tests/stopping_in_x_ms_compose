#!/bin/bash
set -e

# Script level settings
cwd=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
yml="${cwd}/docker-compose.yml"
image="$1"
pid=${BASHPID}
hostname=$(cat $yml | gojq -r --yaml-input '.services | keys[0]' )
cname=test${pid}_${hostname}_1

timeout_ms=$(basename $0 | sed 's/[^0-9]//g')
timeout_hard=$((($timeout_ms/1000)+3))

if [[ -r "${cwd}/../../_tools/helpers/common.sh" ]]; then
	source "${cwd}/../../_tools/helpers/common.sh"
else
	source "${cwd}/../../../../../nfqlt/_tools/helpers/common.sh"
fi

# destroy containers and remove trash
cleanup() {
	set +e
	docker-compose -p "test${pid}" -f $yml stop &>/dev/null
	docker-compose -p "test${pid}" -f $yml rm -fv &>/dev/null
	set -e
}
trap cleanup EXIT


## get startup time from starting test if possible
start_wait_ms=$(echo $(dirname $0)/starting_in_* | sed 's/^.*_\([0-9]*\)_ms.*$/\1/g')
if echo "$start_wait_ms" | grep -q ^[0-9]*$
then
	start_wait_s=$(( (($start_wait_ms-1)/1000)+1 ))
else
	start_wait_s=1
fi


docker-compose -p "test${pid}" -f $yml up -d &>/dev/null
sleep $start_wait_s
t1=$(date +%s%N)
docker-compose -p "test${pid}" -f $yml stop $hostname &>/dev/null
t2=$(date +%s%N)


stop_time_ms=$((($t2-$t1)/1000/1000))
if [ $stop_time_ms -gt $timeout_ms ]
then
	echo "ERROR: container stoped in $stop_time_ms, timeout was $timeout_ms ms (result: $stop_time_ms ms; hard timeout $timeout_hard s, start wait $start_wait_s s)."
	exit 1
fi

echo "INFO: container stopped in $stop_time_ms ms."

exit 0

